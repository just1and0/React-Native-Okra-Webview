{"version":3,"sources":["build-with-options.tsx"],"names":["React","useState","View","Modal","Text","TouchableOpacity","SafeAreaView","ActivityIndicator","Alert","WebView","OptionWebViewConfig","BuildWithOptions","props","name","env","okraKey","token","products","color","logo","payment","filter","isCorporate","limit","callback_url","connectMessage","currency","widget_success","widget_failed","exp","onSuccess","onClose","onError","BeforeClose","toggleModal","setToggleModal","isLoading","setisLoading","onTransactionSuccess","res","status","onTransactionCloseConfirmation","alert","text","onPress","onTransactionClose","style","cancelable","onTransactionError","onTransactionBeforeClose","messageReceived","data","webResponse","JSON","parse","event","onNavigationStateChange","state","url","includes","flex","html","e","nativeEvent","backgroundColor","justifyContent","alignItems","paddingVertical","flexDirection","paddingHorizontal","fontWeight","alignSelf"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, Modal, Text, TouchableOpacity, SafeAreaView, ActivityIndicator, Alert } from 'react-native'\nimport { OkraBuildWithOptionsProps } from './types';\nimport { WebView, WebViewNavigation } from 'react-native-webview';\nimport { OptionWebViewConfig } from './webview-config';\n\nconst BuildWithOptions = (props: OkraBuildWithOptionsProps) => {\n    const { name, env, okraKey, token, products, color, logo, payment, filter, isCorporate, limit, callback_url, connectMessage, currency, widget_success, widget_failed, exp, onSuccess, onClose, onError, BeforeClose } = props;\n\n    const [toggleModal, setToggleModal] = useState(true)\n    const [isLoading, setisLoading] = useState(true);\n\n    const onTransactionSuccess = (res: any) => {\n        onSuccess({ status: 'options success', res })\n    }\n\n    const onTransactionCloseConfirmation = () => {\n        Alert.alert(\n            \"End Transaction\",\n            \"You are about to end this transaction, Are you sure you want to do this?\",\n            [\n                {\n                    text: \"No\",\n                    onPress: () => onTransactionClose()\n                },\n                {\n                    text: \"Yes\",\n                    onPress: () => { onTransactionClose(), setToggleModal(false) },\n                    style: \"cancel\",\n                },\n            ],\n            {\n                cancelable: true\n            }\n        );\n    }\n\n    const onTransactionClose = () => {\n        onClose({ status: 'options close' })\n    }\n\n\n    const onTransactionError = (res: any) => {\n        onError && onError({ status: 'options error', res })\n    }\n\n    const onTransactionBeforeClose = () => {\n        BeforeClose && BeforeClose()\n    }\n\n    const messageReceived = (data: string) => {\n        const webResponse = JSON.parse(data);\n\n        switch (webResponse.event) {\n            case 'option success':\n                onTransactionSuccess(webResponse)\n                break;\n\n            case 'option close':\n                onTransactionClose()\n                break;\n\n            case 'option error':\n                onTransactionError(webResponse)\n                break;\n\n            case 'option before close':\n                onTransactionBeforeClose()\n                break;\n\n\n            default:\n                onTransactionClose()\n                break;\n        }\n    };\n\n    const onNavigationStateChange = (state: WebViewNavigation) => {\n        const { url } = state;\n        if (!url) return;\n        if (url.includes('shouldClose=true')) {\n            onTransactionClose()\n        }\n    };\n\n    return (\n        <View>\n            <Modal visible={toggleModal} animationType={'slide'}>\n                <SafeAreaView style={{ flex: 1 }}>\n                    <WebView\n                        source={{ html: OptionWebViewConfig({ name, env, okraKey, token, products, color, logo, payment, filter, isCorporate, limit, callback_url, connectMessage, currency, widget_success, widget_failed, exp }) }}\n                        onMessage={(e) => {\n                            messageReceived(e.nativeEvent?.data);\n                        }}\n                        onLoadStart={() => setisLoading(true)}\n                        onLoadEnd={() => setisLoading(false)}\n                        onNavigationStateChange={onNavigationStateChange}\n                        cacheEnabled={false}\n                        cacheMode={'LOAD_NO_CACHE'}\n                    />\n\n                    <View style={{ backgroundColor: color ? color : 'rgb(58, 183, 149)', justifyContent: 'space-between', alignItems: 'center', paddingVertical: 15, flexDirection: 'row' }}>\n                        <View style={{ flex: 1 }}>\n                            {isLoading && (\n                                <View>\n                                    <ActivityIndicator size=\"large\" color={'white'} />\n                                </View>\n                            )}\n                        </View>\n                        <View style={{ flex: 3, paddingHorizontal: 15 }}>\n                            <TouchableOpacity onPress={() => onTransactionCloseConfirmation()}>\n                                <Text style={{ color: 'white', fontWeight: 'bold', alignSelf: 'flex-end' }}>\n                                    close\n                                </Text>\n                            </TouchableOpacity>\n                        </View>\n                    </View>\n\n                </SafeAreaView>\n            </Modal>\n        </View>\n    )\n}\n\nexport default BuildWithOptions;\n"]}