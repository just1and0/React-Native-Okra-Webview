{"version":3,"sources":["webview-config.ts"],"names":["ShortUrlWebViewConfig","props","short_url","OptionWebViewConfig","color","setColor","setLogo","logo","setPayment","payment","JSON","stringify","setIsCorporate","isCorporate","name","env","app_id","okraKey","token","products","filter","limit","callback_url","connectMessage","currency","widget_success","widget_failed","exp","charge"],"mappings":"AAEA,MAAMA,qBAAqB,GAAIC,KAAD,IAAwC;AACtE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsCA,KAAK,CAACC,SAAU;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3CA;;AA6CA,MAAMC,mBAAmB,GAAIF,KAAD,IAAqC;AAC/D,QAAM;AAACG,IAAAA;AAAD,MAAUH,KAAhB;AAEA,MAAII,QAAQ,GAAGD,KAAK,GAAGA,KAAH,GAAW,mBAA/B;AACA,MAAIE,OAAO,GAAGL,KAAK,CAACM,IAAN,GACVN,KAAK,CAACM,IADI,GAEV,mKAFJ;AAGA,MAAIC,UAAU,GAAGP,KAAK,CAACQ,OAAN,GAAgBC,IAAI,CAACC,SAAL,CAAeV,KAAK,CAACQ,OAArB,CAAhB,GAAgD,KAAjE;AACA,MAAIG,cAAc,GAAGX,KAAK,CAACY,WAAN,GACjBH,IAAI,CAACC,SAAL,CAAeV,KAAK,CAACQ,OAArB,CADiB,GAEjB,KAFJ;AAIA,SAAQ;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyBR,KAAK,CAACa,IAAK;AACpC,wBAAwBb,KAAK,CAACc,GAAI;AAClC,2BAA2Bd,KAAK,CAACe,MAAO;AACxC,wBAAwBf,KAAK,CAACgB,OAAQ;AACtC,0BAA0BhB,KAAK,CAACiB,KAAM;AACtC,6BAA6BjB,KAAK,CAACkB,QAAS;AAC5C,yBAAyBb,OAAQ;AACjC,4BAA4BE,UAAW;AACvC,0BAA0BH,QAAS;AACnC,2BAA2BJ,KAAK,CAACmB,MAAO;AACxC,gCAAgCR,cAAe;AAC/C,0BAA0BX,KAAK,CAACoB,KAAM;AACtC,iCAAiCpB,KAAK,CAACqB,YAAa;AACpD,mCAAmCrB,KAAK,CAACsB,cAAe;AACxD,6BAA6BtB,KAAK,CAACuB,QAAS;AAC5C,mCAAmCvB,KAAK,CAACwB,cAAe;AACxD,kCAAkCxB,KAAK,CAACyB,aAAc;AACtD,wBAAwBzB,KAAK,CAAC0B,GAAI;AAClC,2BAA2B1B,KAAK,CAAC2B,MAAO;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CA3DE;AA4DD,CAxED;;AA0EA,SAAQ5B,qBAAR,EAA+BG,mBAA/B","sourcesContent":["import {OptionWebViewConfigProps, ShortUrlWebViewConfigProps} from './types';\n\nconst ShortUrlWebViewConfig = (props: ShortUrlWebViewConfigProps) => `   \n      <!DOCTYPE html>\n      <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Okra React Native SDK</title>\n        </head>\n          <body  onload=\"buildWithShortUrl()\" style=\"background-color:#fff;height:100vh\">\n\n            <script src=\"https://cdn.okra.ng/v2/bundle.js\"></script>\n            <script type=\"text/javascript\">\n\n                window.onload = buildWithShortUrl;\n\n                function buildWithShortUrl(){ \n                    Okra.buildWithShortUrl({\n                        short_url: '${props.short_url}',\n                        onSuccess: function(data){\n                            let response = {event:'option success', data}\n                            window.ReactNativeWebView.postMessage(JSON.stringify(response)) \n                        },\n                        onClose: function(){\n                            let response = {event:'option close'}\n                            window.ReactNativeWebView.postMessage(JSON.stringify(response))\n                        },\n                        BeforeClose: function(){\n                          let response = {event:'option before close'}\n                          window.ReactNativeWebView.postMessage(JSON.stringify(response))\n                      },\n                      onError: function(data){\n                        let response = {event:'option error', data}\n                        window.ReactNativeWebView.postMessage(JSON.stringify(response))\n                    }\n\n                    })\n                }\n\n            </script> \n          </body>\n\n      </html> \n`;\n\nconst OptionWebViewConfig = (props: OptionWebViewConfigProps) => {\n  const {color} = props;\n\n  let setColor = color ? color : 'rgb(58, 183, 149)';\n  let setLogo = props.logo\n    ? props.logo\n    : 'https://media-exp1.licdn.com/dms/image/C4D0BAQHC76UBZ4sKVQ/company-logo_200_200/0/1573671434447?e=1644451200&v=beta&t=roLpHuqKsAsFGpfP39Ne5bqWKOWsBc0pB3Una1fK0WU';\n  let setPayment = props.payment ? JSON.stringify(props.payment) : false;\n  let setIsCorporate = props.isCorporate\n    ? JSON.stringify(props.payment)\n    : false;\n\n  return `   \n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Okra React Native SDK</title>\n  </head>\n    <body onload=\"buildWithOptions()\" style=\"background-color:#fff;height:100vh\">\n\n      <script src=\"https://cdn.okra.ng/v2/bundle.js\"></script>\n      <script type=\"text/javascript\">\n\n          window.onload = buildWithOptions; \n          function buildWithOptions(){ \n              Okra.buildWithOptions({\n                name: '${props.name}',\n                env: '${props.env}',\n                app_id: '${props.app_id}',\n                key: '${props.okraKey}', \n                token: '${props.token}',  \n                products: \"${props.products}\",\n                logo: '${setLogo}',          \n                payment: '${setPayment}',\n                color: '${setColor}',\n                filter: '${props.filter}',\n                isCorporate: '${setIsCorporate}',\n                limit: '${props.limit}',\n                callback_url: '${props.callback_url}',  \n                connectMessage: '${props.connectMessage}',\n                currency: '${props.currency}',\n                widget_success: '${props.widget_success}',             \n                widget_failed: '${props.widget_failed}',\n                exp: '${props.exp}',  \n                charge: '${props.charge}',\n                onSuccess: function(data){\n                      let response = {event:'option success', data}\n                      window.ReactNativeWebView.postMessage(JSON.stringify(response)) \n                  },\n                onClose: function(){\n                      let response = {event:'option close'}\n                      window.ReactNativeWebView.postMessage(JSON.stringify(response))\n                  },\n                  BeforeClose: function(){\n                    let response = {event:'option before close'}\n                    window.ReactNativeWebView.postMessage(JSON.stringify(response))\n                },\n                onError: function(data){\n                  let response = {event:'option error', data}\n                  window.ReactNativeWebView.postMessage(JSON.stringify(response))\n              }\n              })\n          }\n\n      </script> \n    </body>\n\n</html> \n`;\n};\n\nexport {ShortUrlWebViewConfig, OptionWebViewConfig};\n"]}