{"version":3,"sources":["build-with-options.tsx"],"names":["BuildWithOptions","props","name","env","okraKey","token","products","color","logo","payment","filter","isCorporate","limit","callback_url","connectMessage","currency","widget_success","widget_failed","exp","onSuccess","onClose","onError","BeforeClose","toggleModal","setToggleModal","isLoading","setisLoading","onTransactionSuccess","res","status","onTransactionClose","onTransactionError","onTransactionBeforeClose","messageReceived","data","webResponse","JSON","parse","event","onNavigationStateChange","state","url","includes","flex","html","e","nativeEvent","backgroundColor","justifyContent","alignItems","paddingVertical","flexDirection","paddingHorizontal","fontWeight","alignSelf"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, Modal, Text, TouchableOpacity, SafeAreaView, ActivityIndicator } from 'react-native'\nimport { OkraBuildWithOptionsProps } from './types';\nimport { WebView, WebViewNavigation } from 'react-native-webview';\nimport { OptionWebViewConfig } from './webview-config';\n\nconst BuildWithOptions = (props: OkraBuildWithOptionsProps) => {\n    const { name, env, okraKey, token, products, color, logo, payment, filter, isCorporate, limit, callback_url, connectMessage,currency,  widget_success, widget_failed, exp, onSuccess, onClose, onError, BeforeClose } = props;\n\n    const [toggleModal, setToggleModal] = useState(true)\n    const [isLoading, setisLoading] = useState(true);\n\n    const onTransactionSuccess = (res: any) => {\n        onSuccess({ status: 'options success', res })\n        setToggleModal(false)\n    }\n\n    const onTransactionClose = () => {\n        onClose({ status: 'options close' })\n        setToggleModal(false)\n    }\n\n\n    const onTransactionError = (res: any) => {\n        onError && onError({ status: 'options error', res })\n        setToggleModal(false)\n    }\n\n    const onTransactionBeforeClose = () => {\n        BeforeClose && BeforeClose()\n        setToggleModal(false)\n    }\n\n    const messageReceived = (data: string) => {\n        const webResponse = JSON.parse(data);\n\n        switch (webResponse.event) {\n            case 'option success':\n                onTransactionSuccess(webResponse)\n                break;\n\n            case 'option close':\n                onTransactionClose()\n                break;\n\n            case 'option error':\n                onTransactionError(webResponse)\n                setToggleModal(false)\n                break;\n\n            case 'option before close':\n                onTransactionBeforeClose()\n                setToggleModal(false)\n                break;\n\n\n            default:\n                onTransactionClose()\n                break;\n        }\n    };\n\n    const onNavigationStateChange = (state: WebViewNavigation) => {\n        const { url } = state;\n        if (!url) return;\n        if (url.includes('shouldClose=true')) {\n            onTransactionClose()\n        }\n    };\n\n    return (\n        <View>\n            <Modal visible={toggleModal} animationType={'slide'}>\n                <SafeAreaView style={{ flex: 1 }}>\n                    <WebView\n                        source={{ html: OptionWebViewConfig({ name, env, okraKey, token, products, color, logo, payment, filter, isCorporate, limit, callback_url, connectMessage,currency,  widget_success, widget_failed, exp  }) }}\n                        onMessage={(e) => {\n                            messageReceived(e.nativeEvent?.data);\n                        }}\n                        onLoadStart={() => setisLoading(true)}\n                        onLoadEnd={() => setisLoading(false)}\n                        onNavigationStateChange={onNavigationStateChange}\n                        cacheEnabled={false}\n                        cacheMode={'LOAD_NO_CACHE'}\n                    />\n\n                    <View style={{ backgroundColor: color? color : 'rgb(58, 183, 149)', justifyContent: 'space-between', alignItems: 'center', paddingVertical: 15, flexDirection: 'row' }}>\n                        <View style={{ flex: 1 }}>\n                            {isLoading && (\n                                <View>\n                                    <ActivityIndicator size=\"large\" color={'white'} />\n                                </View>\n                            )}\n                        </View>\n                        <View style={{ flex: 3, paddingHorizontal: 15 }}>\n                            <TouchableOpacity onPress={() => onTransactionClose()}>\n                                <Text style={{ color: 'white', fontWeight: 'bold', alignSelf: 'flex-end' }}>\n                                    close\n                                </Text>\n                            </TouchableOpacity>\n                        </View>\n                    </View>\n\n                </SafeAreaView>\n            </Modal>\n        </View>\n    )\n}\n\nexport default BuildWithOptions;\n"]}