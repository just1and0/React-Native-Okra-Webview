{"version":3,"sources":["webview-config.ts"],"names":["ShortUrlWebViewConfig","props","short_url","OptionWebViewConfig","color","setLogo","logo","setColor","setPayment","payment","setProducts","products","JSON","stringify","setFilter","filter","setCharge","charge","setIsCorporate","isCorporate","setcallback_url","callback_url","setConnectMessage","connectMessage","setwidget_success","widget_success","name","setwidget_failed","widget_failed","setExp","exp","setCurrency","currency","setLimit","limit","env","app_id","okraKey","token"],"mappings":"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","sourcesContent":["import { OptionWebViewConfigProps, ShortUrlWebViewConfigProps } from './types';\n\nconst ShortUrlWebViewConfig = (props: ShortUrlWebViewConfigProps) => `   \n      <!DOCTYPE html>\n      <html lang=\"en\">\n        <head>\n          <meta charset=\"UTF-8\">\n          <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Okra React Native SDK</title>\n        </head>\n          <body  onload=\"buildWithShortUrl()\" style=\"background-color:#fff;height:100vh\">\n\n            <script src=\"https://cdn.okra.ng/v2/bundle.js\"></script>\n            <script type=\"text/javascript\">\n\n                window.onload = buildWithShortUrl;\n\n                function buildWithShortUrl(){ \n                    Okra.buildWithShortUrl({\n                        short_url: '${props.short_url}',\n                        onSuccess: function(data){\n                            let response = {event:'option success', data}\n                            window.ReactNativeWebView.postMessage(JSON.stringify(response)) \n                        },\n                        onClose: function(){\n                            let response = {event:'option close'}\n                            window.ReactNativeWebView.postMessage(JSON.stringify(response))\n                        },\n                        BeforeClose: function(){\n                          let response = {event:'option before close'}\n                          window.ReactNativeWebView.postMessage(JSON.stringify(response))\n                      },\n                      onError: function(data){\n                        let response = {event:'option error', data}\n                        window.ReactNativeWebView.postMessage(JSON.stringify(response))\n                    }\n\n                    })\n                }\n\n            </script> \n          </body>\n\n      </html> \n`;\n\nconst OptionWebViewConfig = (props: OptionWebViewConfigProps) => {\n  const { color } = props;\n\n\n  let setLogo = props.logo\n    ? props.logo\n    : `https://media-exp1.licdn.com/dms/image/C4D0BAQHC76UBZ4sKVQ/company-logo_200_200/0/1573671434447?e=1644451200&v=beta&t=roLpHuqKsAsFGpfP39Ne5bqWKOWsBc0pB3Una1fK0WU`;\n  let setColor = color ? color : 'rgb(58, 183, 149)';\n  let setPayment = props.payment ? `${props.payment}` : 'false';\n  let setProducts = props.products && `products:${JSON.stringify(props.products)},`;\n  let setFilter = props.filter ? `filter:${JSON.stringify(props.filter)},` : `filter:${JSON.stringify([])},`;\n  let setCharge = props.charge ? `charge:${JSON.stringify(props.charge)},` : `filter:${JSON.stringify([])},`;\n  let setIsCorporate = props.isCorporate ? `${props.isCorporate}` : 'false';\n  let setcallback_url = props.callback_url ? `${props.callback_url}` : null;\n  let setConnectMessage = props.connectMessage ? `${props.connectMessage}` : null;\n  let setwidget_success = props.widget_success ? `${props.widget_success}` : `Your account was linked successfully with ${props.name}`;\n  let setwidget_failed = props.widget_failed ? `${props.widget_failed}` : `Something went wrong while linking your account to ${props.name}`;\n  let setExp = props.exp ? `${props.exp}` : null;\n  let setCurrency = props.currency ? `${props.currency}` : 'NGN';\n  let setLimit = props.limit ? `${props.limit}` : null;\n\n  return `   \n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Okra React Native SDK</title>\n  </head>\n    <body onload=\"buildWithOptions()\" style=\"background-color:#fff;height:100vh\">\n\n      <script src=\"https://cdn.okra.ng/v2/bundle.js\"></script>\n      <script type=\"text/javascript\">\n\n          window.onload = buildWithOptions; \n          function buildWithOptions(){ \n              Okra.buildWithOptions({\n                name: '${props.name}',\n                env: '${props.env}',\n                app_id: '${props.app_id}',\n                key: '${props.okraKey}', \n                token: '${props.token}',  \n                payment:${setPayment},\n                isCorporate:${setIsCorporate},\n                logo:'${setLogo}',\n                callback_url:'${setcallback_url}',\n                exp:'${setExp}',\n                connectMessage:'${setConnectMessage}',\n                widget_success:'${setwidget_success}',\n                widget_failed:'${setwidget_failed}',\n                currency:'${setCurrency}',\n                ${setFilter}\n                color: '${setColor}',\n                limit: ${setLimit},\n                ${setProducts}\n                ${setCharge}\n                onSuccess: function(data){\n                      let response = {event:'option success', data}\n                      window.ReactNativeWebView.postMessage(JSON.stringify(response)) \n                  },\n                onClose: function(){\n                      let response = {event:'option close'}\n                      window.ReactNativeWebView.postMessage(JSON.stringify(response))\n                  },\n                  BeforeClose: function(){\n                    let response = {event:'option before close'}\n                    window.ReactNativeWebView.postMessage(JSON.stringify(response))\n                },\n                onError: function(data){\n                  let response = {event:'option error', data}\n                  window.ReactNativeWebView.postMessage(JSON.stringify(response))\n              }\n              })\n          }\n\n      </script> \n    </body>\n\n</html> \n`;\n};\n\nexport { ShortUrlWebViewConfig, OptionWebViewConfig };"]}