{"version":3,"sources":["build-with-short-url.tsx"],"names":["BuildWithShortUrl","props","short_url","onSuccess","onClose","onError","BeforeClose","onEvent","toggleModal","setToggleModal","isLoading","setIsLoading","onTransactionSuccess","res","status","onTransactionCloseConfirmation","Alert","alert","text","onPress","onTransactionClose","style","cancelable","onTransactionError","onTransactionBeforeClose","messageReceived","data","webResponse","JSON","parse","event","onNavigationStateChange","state","url","includes","flex","html","e","nativeEvent","backgroundColor","justifyContent","alignItems","paddingVertical","flexDirection","paddingHorizontal","color","fontWeight","alignSelf"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport { View, Modal, SafeAreaView, ActivityIndicator, TouchableOpacity, Text, Alert } from 'react-native'\nimport { OkraBuildWithShortUrlProps } from './types';\nimport { WebView, WebViewNavigation } from 'react-native-webview';\nimport { ShortUrlWebViewConfig } from './webview-config';\n\nconst BuildWithShortUrl = (props: OkraBuildWithShortUrlProps) => {\n    const { short_url, onSuccess, onClose, onError, BeforeClose, onEvent } = props;\n\n    const [toggleModal, setToggleModal] = useState(true)\n    const [isLoading, setIsLoading] = useState(true);\n\n    const onTransactionSuccess = (res: any) => {\n\n        onSuccess({ status: 'options success', res })\n\n    }\n\n    const onTransactionCloseConfirmation = () => {\n        Alert.alert(\n            \"End Transaction\",\n            \"You are about to end this transaction, Are you sure you want to do this?\",\n            [\n                {\n                    text: \"No\",\n                    onPress: () => onTransactionClose()\n                },\n                {\n                    text: \"Yes\",\n                    onPress: () => { onTransactionClose(), setToggleModal(false) },\n                    style: \"cancel\",\n                },\n            ],\n            {\n                cancelable: true\n            }\n        );\n    }\n\n    const onTransactionClose = () => {\n        onClose({ status: 'options close' })\n\n    }\n\n    const onTransactionError = (res: any) => {\n        onError && onError({ status: 'options error', res })\n\n    }\n\n    const onTransactionBeforeClose = () => {\n        BeforeClose && BeforeClose()\n\n    }\n\n    const messageReceived = (data: string) => {\n        const webResponse = JSON.parse(data);\n\n        switch (webResponse.event) {\n            case 'option success':\n                onTransactionSuccess(webResponse)\n                break;\n\n            case 'option close':\n                onTransactionClose()\n                break;\n\n            case 'option error':\n                onTransactionError(webResponse)\n                break;\n\n            case 'option before close':\n                onTransactionBeforeClose()\n                break;\n\n            case 'option event':\n                onEvent && onEvent(webResponse);\n                break\n\n            default:\n                onTransactionClose()\n                break;\n        }\n    };\n\n    const onNavigationStateChange = (state: WebViewNavigation) => {\n        const { url } = state;\n        if (!url) return;\n        if (url.includes('shouldClose=true')) {\n            onTransactionClose()\n        }\n    };\n\n    return (\n        <View>\n            <Modal visible={toggleModal} animationType={'slide'}>\n                <SafeAreaView style={{ flex: 1 }}>\n                    <WebView\n                        source={{ html: ShortUrlWebViewConfig({ short_url }) }}\n                        onMessage={(e) => {\n                            messageReceived(e.nativeEvent?.data);\n                        }}\n                        onLoadStart={() => setIsLoading(true)}\n                        onLoadEnd={() => setIsLoading(false)}\n                        onNavigationStateChange={onNavigationStateChange}\n                        cacheEnabled={false}\n                        cacheMode={'LOAD_NO_CACHE'}\n                    />\n                    <View style={{ backgroundColor: 'rgb(58, 183, 149)', justifyContent: 'space-between', alignItems: 'center', paddingVertical: 15, flexDirection: 'row' }}>\n                        <View style={{ flex: 1 }}>\n                            {isLoading && (\n                                <View>\n                                    <ActivityIndicator size=\"large\" color={'white'} />\n                                </View>\n                            )}\n                        </View>\n                        <View style={{ flex: 3, paddingHorizontal: 15 }}>\n                            <TouchableOpacity onPress={() => onTransactionCloseConfirmation()}>\n                                <Text style={{ color: 'white', fontWeight: 'bold', alignSelf: 'flex-end' }}>\n                                    close\n                                </Text>\n                            </TouchableOpacity>\n                        </View>\n                    </View>\n                </SafeAreaView>\n            </Modal>\n\n        </View>\n    )\n}\n\nexport default BuildWithShortUrl;\n"]}